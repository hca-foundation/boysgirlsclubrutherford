Job_Type
- Good here - new database has exact rows/ids but NEW columns
!!- Can run early in new database

Location
- Good here - new database has exact rows/ids but NEW columns
!!- Can run early in new database

Volunteer
- EXPORT CURRENT LIST AND IMPORT - SET ACTIVE AS DEFAULT OF 1
- Same fields - good to go
-- RUN ON WEEKEND WHERE WE MIGRATE

Volunteer_Period
- Change to volunteer period: Feedback is now Feedback_ID


0) XX BACK UP THE DATABASE!!


1) XX CREATE TEMP TABLE TO MIGRATE DATA IN PROD DB

CREATE TABLE dbo.feedback (
	id int NOT NULL IDENTITY(1,1),
	volunteer_id int NULL,
	feedback varchar(8000) NULL,
	CONSTRAINT PK_feedback PRIMARY KEY (id),
	CONSTRAINT FK_feedback_volunteer FOREIGN KEY (volunteer_id) REFERENCES dbo.volunteer(id) ON DELETE NO ACTION ON UPDATE NO ACTION
)
CREATE TABLE dbo.volunteer_period_temp (
	id int NOT NULL IDENTITY(1,1),
	check_in_time datetime NOT NULL,
	check_out_time datetime NULL DEFAULT (NULL),
	hours decimal(3,1) NULL DEFAULT (NULL),
	affiliation varchar(100) NULL DEFAULT (NULL),
	health_release int NOT NULL,
	photo_release int NOT NULL,
	liability_release int NOT NULL,
	first_time int NOT NULL,
	job_type_id int NOT NULL,
	location_id int NOT NULL,
	community_service_hours int NULL DEFAULT (NULL),
	volunteer_id int NOT NULL,
	feedback_id int NULL,
	CONSTRAINT PK_volunteer_period PRIMARY KEY (id),
	CONSTRAINT FK_volunteer_period_jobtype FOREIGN KEY (job_type_id) REFERENCES dbo.job_type(id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT FK_volunteer_period_location FOREIGN KEY (location_id) REFERENCES dbo.location(id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT FK_volunteer_period_volunteer FOREIGN KEY (volunteer_id) REFERENCES dbo.volunteer(id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT FK_volunteer_period_feedback FOREIGN KEY (feedback_id) REFERENCES dbo.feedback(id) ON DELETE CASCADE ON UPDATE CASCADE
)


2) XX RUN QUERY THAT PULLS FROM VOLUNTEER PERIOD AND INSERTS INTO FEEDBACK AND VOLUNTEER_PERIOD_TEMP

-- Set Variables
DECLARE @au_id char( 11 ), 
			@vp_id int, 
			@vp_vid int, 
			@vp_feedback varchar(8000), 
			@vp_feedback_id int 
DECLARE @check_in_time datetime, 
			@check_out_time datetime,
			@hours decimal(3,1),
			@affiliation varchar(100),
			@health_release int,
			@photo_release int,
			@liability_release int,
			@first_time int,
			@job_type_id int,
			@location_id int,
			@community_service_hours int
-- Get the first id in the volunteer_period table
SELECT @au_id = min( id ) FROM volunteer_period
WHILE @au_id IS NOT NULL
	-- Loop through each line in the table
	BEGIN
	    -- Get the current row
		SELECT 
	    		@vp_id = id,
	    		@vp_vid = volunteer_id,
	    		@vp_feedback = feedback,
			@check_in_time = check_in_time, 
			@check_out_time = check_out_time, 
			@hours = hours,
			@affiliation = affiliation,
			@health_release  = health_release,
			@photo_release = photo_release,
			@liability_release = liability_release,
			@first_time  = first_time ,
			@job_type_id = job_type_id,
			@location_id = location_id,
			@community_service_hours = community_service_hours
	    	FROM volunteer_period 
	    	WHERE id = @au_id
    
	    	-- Create a feedback item IF feedback exists in the volunteer data
	    	IF datalength(@vp_feedback)!=0
	    		BEGIN
	    			INSERT INTO feedback (volunteer_id,feedback) VALUES (@vp_vid, @vp_feedback)
	    			SET @vp_feedback_id = SCOPE_IDENTITY()    		
	    		END
	    	ELSE
	    		BEGIN
		    		SET @vp_feedback_id = NULL
	    		END     	

	    	-- Insert into the new table
	    	INSERT INTO volunteer_period_temp 
	    		(check_in_time,check_out_time,hours,affiliation,health_release,photo_release,liability_release,first_time,job_type_id,location_id,community_service_hours,volunteer_id,feedback_id) 
	    	VALUES 
	    		(@check_in_time, @check_out_time, @hours, @affiliation, @health_release, @photo_release, @liability_release, @first_time, @job_type_id, @location_id, @community_service_hours, @vp_vid, @vp_feedback_id)
    	
	    	-- Increase id to next id and loop on next row
	    SELECT @au_id = min( id ) FROM volunteer_period WHERE id > @au_id
	END

3) XX Test outputs by running the following and ensure they are matching
-- MATCH
select count(id) as 'EXISTING volunteer period count' from volunteer_period 
select count(id) as 'NEW volunteer period count' from volunteer_period_temp
-- MATCH
select count(id) as 'EXISTING Feedback count' from volunteer_period where datalength(feedback)!=0  
select count(id) as 'NEW Feedback Count' from feedback

4) With new table, we can export that data and import it into new tables without any issues
-- Export feedback table - IMPORT
-- Export volunteer_period_temp table - IMPORT